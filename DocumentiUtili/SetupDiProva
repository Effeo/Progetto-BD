CREATE TABLE ALBUM (
	CodA SERIAL,
	Titolo VARCHAR(50) NOT NULL,
	AnnoU INTEGER NOT NULL,
	Durata TIME DEFAULT '00:00:00',
	Ntracce INTEGER DEFAULT 0,
	Etichetta VARCHAR(20) DEFAULT NULL,
	Voto NUMERIC(2,2) DEFAULT 0,
	
	PRIMARY KEY (CodA)
);


CREATE TABLE TRACCIA (
	CodT SERIAL,
	Titolo VARCHAR(50) NOT NULL,
	Durata TIME NOT NULL,
	Etichetta VARCHAR(20) DEFAULT NULL,
	AnnoU INTEGER,
	IsCover BOOLEAN DEFAULT FALSE,
	IsRemastered BOOLEAN DEFAULT FALSE,
	Genere VARCHAR(30) NOT NULL,
	Link VARCHAR(300),
	Formato VARCHAR(4) DEFAULT 'MP3',
	Voto NUMERIC(2,2) DEFAULT 0,
	Qualita INTEGER DEFAULT 128,
	CodA INTEGER DEFAULT 0,
	CodTR INTEGER DEFAULT 0,
	CodTC INTEGER DEFAULT 0,
	
	UNIQUE(Titolo, AnnoU, CodA),
	PRIMARY KEY (CodT),
	FOREIGN KEY (CodA) REFERENCES Album(CodA)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodTR) REFERENCES Traccia(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodTC) REFERENCES Traccia(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	
	CHECK (Formato = 'MP3' or Formato = 'WAV' or Formato = 'FLAC'),
	CHECK (Qualita = 128 or Qualita = 256 or Qualita = 512)
);


CREATE TABLE UTENTE (
	NickName VARCHAR(20),
	Nome VARCHAR(30) NOT NULL,
	Cognome VARCHAR(30) NOT NULL,
	Email VARCHAR(100) NOT NULL,
	Password VARCHAR(20) NOT NULL,
	DataN DATE NOT NULL,
	Sesso VARCHAR(15) NOT NULL,
	Nazionalita VARCHAR(15) DEFAULT NULL,
	Descrizione VARCHAR(100) DEFAULT NULL,
	IsPremium BOOLEAN DEFAULT FALSE,
	IsAdmin BOOLEAN DEFAULT FALSE,

	PRIMARY KEY (NickName),
	
	UNIQUE(Email),
	CHECK (Email LIKE '_%@_%._%'),
	CHECK (Sesso = 'Uomo' or Sesso = 'Donna' or Sesso = 'Altro' or Sesso = 'Transgender'or Sesso = 'Lampadina' or Sesso = 'Unicorno')
);


CREATE TABLE PLAYLIST(
	CodP SERIAL,
	Titolo VARCHAR(20) NOT NULL,
	Durata TIME DEFAULT '00:00:00',
	NTracce INTEGER DEFAULT 0,
	Visibilita BOOLEAN DEFAULT TRUE,
	NickName VARCHAR(20),
	
	PRIMARY KEY (CodP),
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);


CREATE TABLE ASCOLTA (
	Nickname VARCHAR(20),
	CodT INTEGER,
	FasciaOraria INTEGER NOT NULL,
	
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	
	CHECK(FasciaOraria >= 1 and FasciaOraria <= 6) 
);

CREATE TABLE VOTA (
	NickName VARCHAR(20),
	CodT INTEGER,
	Voto INTEGER NOT NULL,
	
	UNIQUE(NickName, CodT),
	
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,	
	
	CHECK(Voto >= 1 and Voto <= 10)
);

CREATE TABLE CONTIENE (
	CodP INTEGER,
	CodT INTEGER,
	
	UNIQUE(CodP, CodT),
	
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodP) REFERENCES PLAYLIST(CodP)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);


CREATE TABLE ARTISTA (
	NomeArte VARCHAR(30),
	Descrizione VARCHAR(300) DEFAULT NULL,
	Voto NUMERIC(2,2) DEFAULT 0,

	PRIMARY KEY(NomeArte)
);

CREATE TABLE INCIDE (
	NomeArte VARCHAR(30),
	CodA INTEGER,
	
	UNIQUE(NomeArte, CodA),
	FOREIGN KEY (NomeArte) REFERENCES ARTISTA(NomeArte)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodA) REFERENCES ALBUM(CodA)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

CREATE TABLE PRODUCE (
	NomeArte VARCHAR(30),
	CodT INTEGER,
	
	UNIQUE(NomeArte, CodT),
	FOREIGN KEY (NomeArte) REFERENCES ARTISTA(NomeArte)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

--In questo blocco inseriremo prima tutte le procedure che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger


-- Per prima cosa costruiamo una procedura che si occupa di aggiornare la media del voto di una traccia dopo che e' stata votata o quando Ã¨ stato modificato
--un voto
--(CORRETTA CI STA DANDO PROBLEMI)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia() RETURNS TRIGGER AS $Voto_Traccia$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  GROUP BY V.CodT)
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia$ LANGUAGE PLPGSQL;

--Passiamo ora alle modifiche relative agli album (necessarie dopo le modifiche dei voti delle tracce)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Album() RETURNS TRIGGER AS $Voto_Album$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA and T.Voto > 0
		  GROUP BY T.CodT )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album$ LANGUAGE PLPGSQL;

--Passiamo ora alle modifiche relative agli artisti
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Artista() RETURNS TRIGGER AS $Voto_Artista$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=NEW.CodT) and T.Voto > 0
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=NEW.CodT);
	RETURN NULL;
END;$Voto_Artista$ LANGUAGE PLPGSQL;

--In conlusione andiamo a modificare i valori di media ntracce e durate per Album quando si aggiunge una traccia al Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Album() RETURNS TRIGGER AS $Agg_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=NEW.CodA and T.Voto > 0)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$Agg_Album$ LANGUAGE PLPGSQL;

-- Facciamo lo stesso in fase di rimozione di una Traccia da un Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Rem_Traccia_Album() RETURNS TRIGGER AS $Rem_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA = OLD.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=OLD.CodA and T.Voto > 0)
	WHERE CodA=OLD.CodA;
	RETURN NULL;
END;$Rem_Album$ LANGUAGE PLPGSQL;

--Passiamo alle Playlist (prima in aggiunta)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Playlist() RETURNS TRIGGER AS $Agg_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.Codt=NEW.Codt)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$Agg_Playlist$ LANGUAGE PLPGSQL;

--Infine la rimozione
--(CORRETTA)
CREATE OR REPLACE FUNCTION Rem_Traccia_Playlist() RETURNS TRIGGER AS $Rem_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce-1,
	    Durata=(SELECT SUM(durata)
			     FROM CONTIENE AS C, Traccia as T
			     WHERE C.CodP=OLD.CodP and C.CodT = T.CodT)
	    
	WHERE CodP=OLD.CodP;
	RETURN NULL; 
END;$Rem_Playlist$ LANGUAGE PLPGSQL;

--Creazione della playlist brani preferiti quando viene aggiunto un nuovo utente
--(CORRETTA)
CREATE OR REPLACE FUNCTION Playlist_Default() RETURNS TRIGGER AS $Def_Playlist$
BEGIN 
	insert into Playlist(Titolo, NickName)
	values('Brani preferiti', New.NickName);
	RETURN NULL;
END; $Def_Playlist$ LANGUAGE PLPGSQL;

--Funzione che aggiorna i voti di un artista quando una traccia viene eliminata
--(DA CONTROLLARE)
CREATE OR REPLACE FUNCTION Edit_Voto_Artista_Del() RETURNS TRIGGER AS $Voto_Artista_Del$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=OLD.CodT) and T.Voto > 0
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=OLD.CodT);
	RETURN NULL;
END;$Voto_Artista_Del$ LANGUAGE PLPGSQL;

-- Conclusa la parte della creazione delle procedure creiamo ora i trigger che faranno uso di queste procedure

--Primo Trigger aggiorna la media di una Traccia
--(CORRETTA)
CREATE OR REPLACE TRIGGER Voto_Traccia_Media
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

-- Secondo Trigger aggiorna il voto conseguente ad una modifica da parte del utente
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Utente_Mod
AFTER UPDATE OF Voto on VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

--Terzo Trigger modifica il Voto del Album,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Album_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album();

--Quarto Trigger modifica il Voto del Artista,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Artista_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista();

-- Quinto Trigger si attiva quando aggiungiamo una traccia in un Album 
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Album_Mod
AFTER INSERT ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Album();

--Sesto Trigger si attiva quando rimuoviamo una traccia in un Album
--(CORRETTO)
CREATE OR REPLACE TRIGGER Rem_Album_Mod
AFTER DELETE ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Album();

--Settimo Trigger in aggiunta di una Traccia in una Playlist
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Playlist_Mod
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Playlist();

--Ottavo Trigger in rimozione
--(CORRETTO)
CREATE OR REPLACE TRIGGER Rem_Playlist
AFTER DELETE ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Playlist();

--Trigger per aggiornare il voto di un artista dopo l'eliminazione di una traccia
--(DA CONTROLLARE)
CREATE OR REPLACE TRIGGER Agg_Voto_Art_Del
AFTER DELETE ON Traccia
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista_Del();

--Ultimo Trigger Crea una playlist default per l'Utente
--(CORRETTO)
CREATE OR REPLACE TRIGGER Def_Playlist
AFTER INSERT ON UTENTE
FOR EACH ROW
EXECUTE PROCEDURE Playlist_Default();

--FUNZIONI PER I VINCOLI
--primo vincolo: un utente non premium non puÃ² ascoltare tracce di qualitÃ  maggiore al 128
Create or replace Function UtentePremium() returns Trigger as $AscoltiNoPremium$
DECLARE
	Qualita1 Traccia.Qualita%TYPE;
	IsPremium1 Utente.IsPremium%TYPE;
BEGIN
	Select Qualita into Qualita1
	From Traccia
	Where New.CodT = Traccia.CodT;
	
	Select IsPremium into IsPremium1
	From Utente
	Where New.NickName = Utente.NickName;
	
	if(Qualita1 > 128 and not IsPremium1) then
		Delete From Ascolta Where (Ascolta.CodT = new.CodT and Ascolta.NickName = NEW.NickName);
	end if;
	Return null;
END;$AscoltiNoPremium$ Language plpgsql;

--seconda funzione: i voti devono essere di utenti premium
Create or replace Function VotoUtentePremium() returns Trigger as $VotiNoPremium$
DECLARE
	IsPremium1 Utente.IsPremium%TYPE;
BEGIN
	Select IsPremium into IsPremium1
	From Utente
	Where New.NickName = Utente.NickName;
	
	if(not IsPremium1) then
		Delete From Vota Where (Vota.CodT = new.CodT and Vota.NickName = NEW.NickName);
	end if;
	Return null;
END;$VotiNoPremium$ Language plpgsql;

--Terzo trigger: se una traccia Ã¨ cover allora deve avere artista diverso dall'originale
Create or replace Function TracciaCover() returns Trigger as $TracciaCoverTrigger$
DECLARE
	TracciaOr Traccia.CodTC%Type;
	ArtistaOr Artista.NomeArte%Type;
	Cover Traccia.IsCover%Type;
BEGIN
	SELECT IsCover into Cover
	FROM Traccia
	where Traccia.CodT = New.Codt;
	if(Cover) then
		SELECT Traccia.CodTC into TracciaOr
		FROM Produce, Traccia
		Where Produce.CodT = New.CodT and Traccia.CodT = New.CodT;

		SELECT Artista.NomeArte into ArtistaOr
		FROM Artista, Produce
		Where Produce.CodT = TracciaOr and Produce.NomeArte = Artista.NomeArte;

		if (ArtistaOr = new.NomeArte) then
			delete from Produce where (CodT = New.CodT and NomeArte = new.NomeArte);
		end if;
	end if;
	Return null;
END;$TracciaCoverTrigger$ Language plpgsql;

--Quarto trigger: il formato della remastered deve essere maggiore di quella originale e l'anno deve essere maggiore dell'originale
Create or replace Function FormatoAnnoRemastered() returns Trigger as $FormatoAnnoRemasteredTrigger$
DECLARE
	FormatoO Traccia.Formato%Type;
	AnnoO Traccia.AnnoU%Type;
BEGIN
	if(New.IsRemastered) then
		SELECT Traccia.Formato into FormatoO
		FROM Traccia
		Where Traccia.CodT = New.CodTR;

		SELECT Traccia.AnnoU into AnnoO
		FROM Traccia
		Where Traccia.CodT = New.CodTR;

		if(FormatoO = 'MP3' and new.Formato = 'MP3')then
			delete from Traccia where Codt = new.CodT;
		elseif(FormatoO = 'WAV' and (new.Formato = 'WAV' or new.Formato = 'MP3')) then
			delete from Traccia where Codt = new.CodT;
		elseif (FormatoO = 'FLAC' and new.Formato <> 'FLAC') then
			delete from Traccia where Codt = new.CodT;
		end if;

		if(New.AnnoU <= AnnoO) then
			delete from Traccia where Codt = new.CodT;
		end if;
	end if;
	Return null;
END; $FormatoAnnoRemasteredTrigger$ Language plpgsql;

--Quinto trigger: L'anno della cover deve essere maggiore uguale dell'originale e l'album di apparteneza deve essere diverso
Create or replace Function AlbumAnnoCover() returns Trigger as $AlbumAnnoCoverTrigger$
DECLARE
	CodAO Traccia.CodA%Type;
	AnnoO Traccia.AnnoU%Type;
BEGIN
	if(New.IsCover) then
		SELECT Traccia.CodA into CodAO
		FROM Traccia
		Where Traccia.CodT = New.CodTC;

		SELECT Traccia.AnnoU into AnnoO
		FROM Traccia
		Where Traccia.CodT = New.CodTC;

		if(CodAO = new.CodA or new.AnnoU < AnnoO) then
			delete from Traccia where Codt = new.CodT;
		end if;
	end if;
	Return null;
END; $AlbumAnnoCoverTrigger$ Language plpgsql;

--TRIGGER
--Trigger per il primo vincolo
Create or replace Trigger AscoltiNoPremium 
After Insert on Ascolta
FOR EACH ROW
Execute procedure UtentePremium();

--Trigger per il secondo vincolo
Create or replace Trigger VotiNoPremium 
After Insert on Vota
FOR EACH ROW
Execute procedure VotoUtentePremium();

--Trigger per il terzo vincolo
Create or replace Trigger TracciaCoverTrigger 
After Insert on Produce
FOR EACH ROW
Execute procedure TracciaCover();

--Trigger per il quarto vincolo
Create or replace Trigger FormatoAnnoRemasteredTrigger 
After Insert on Traccia
FOR EACH ROW
Execute procedure FormatoAnnoRemastered();

--Trigger per il quinto vincolo
Create or replace Trigger AlbumAnnoCoverTrigger 
After Insert on Traccia
FOR EACH ROW
Execute procedure AlbumAnnoCover();

--primo utente: utente base, puÃ² solo ascoltare le tracce, visitare le tracce, gli album, gli artisti, gli altri utenti e le playlist.
CREATE USER UtenteBase PASSWORD 'base';
GRANT SELECT on Traccia to UtenteBase;
GRANT SELECT on Album to UtenteBase;
GRANT SELECT on Artista to UtenteBase;
GRANT SELECT on Playlist to UtenteBase;
GRANT SELECT on Contiene to UtenteBase;
GRANT SELECT on Utente to UtenteBase;
GRANT SELECT on Produce to UtenteBase;
GRANT SELECT on Incide to UtenteBase;
GRANT INSERT on Contiene to UtenteBase;
GRANT INSERT on Playlist to UtenteBase;
GRANT INSERT on Ascolta to UtenteBase;
GRANT UPDATE on Playlist to UtenteBase;
GRANT DELETE on Playlist to UtenteBase;
GRANT UPDATE on Contiene to UtenteBase;
GRANT DELETE on Contiene to UtenteBase;

--secondo utente: oltre ad avere i privilegi dell'utente normale puÃ² anche votare delle tracce.
CREATE USER UtentePremium PASSWORD 'premium';
GRANT SELECT on Traccia to UtentePremium;
GRANT SELECT on Album to UtentePremium;
GRANT SELECT on Artista to UtentePremium;
GRANT SELECT on Playlist to UtentePremium;
GRANT SELECT on Contiene to UtentePremium;
GRANT SELECT on Utente to UtentePremium;
GRANT SELECT on Produce to UtentePremium;
GRANT SELECT on Incide to UtentePremium;
GRANT INSERT on Contiene to UtentePremium;
GRANT INSERT on Playlist to UtentePremium;
GRANT INSERT on Ascolta to UtentePremium;
GRANT UPDATE on Playlist to UtentePremium;
GRANT DELETE on Playlist to UtentePremium;
GRANT UPDATE on Contiene to UtentePremium;
GRANT DELETE on Contiene to UtentePremium;
GRANT INSERT on Vota to UtentePremium;
GRANT DELETE on Vota to UtentePremium;
GRANT UPDATE on Vota to UtentePremium;

--terzo utente: utente admin, ha tutti i privilegi
CREATE USER UtenteAdmin PASSWORD 'admin';
GRANT ALL on Traccia to UtenteAdmin;
GRANT ALL on Album to UtenteAdmin;
GRANT ALL on Artista to UtenteAdmin;
GRANT ALL on Playlist to UtenteAdmin;
GRANT ALL on Contiene to UtenteAdmin;
GRANT ALL on Utente to UtenteAdmin;
GRANT ALL on Produce to UtenteAdmin;
GRANT ALL on Incide to UtenteAdmin;
GRANT ALL on Vota to UtenteAdmin;
GRANT ALL on Ascolta to UtenteAdmin;

--INSERT
INSERT INTO ARTISTA(NomeArte,Descrizione,Voto)
VALUES ('ColdPlay','Si divertono a creare generi, non aiutandoci a fare questo progetto...',DEFAULT);

INSERT INTO ALBUM (CodA, Titolo,AnnoU,Durata,Ntracce,Etichetta,Voto)
VALUES(0,'Fittizio',2008,DEFAULT,DEFAULT,DEFAULT,DEFAULT);

INSERT INTO ALBUM (Titolo,AnnoU,Durata,Ntracce,Etichetta,Voto)
VALUES('Viva la vida or Death and all his friends',2008,DEFAULT,DEFAULT,DEFAULT,DEFAULT);

INSERT INTO TRACCIA(CodT,Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES(0, 'Fittizio','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte',DEFAULT,'MP3',DEFAULT,128,0);


INSERT INTO TRACCIA(Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES('Life in Technicolors','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte','https://open.spotify.com/track/7MT5mNCNNCoW6XP265UkdS?si=0250a49e39c7482a','MP3',DEFAULT,128,1);

INSERT INTO TRACCIA(Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES('Life in Technicolors2','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte','https://open.spotify.com/track/7MT5mNCNNCoW6XP265UkdS?si=0250a49e39c7482a','MP3',DEFAULT,128,1);

INSERT INTO UTENTE(Nome,Cognome,Nickname,Email,Password,DataN,Sesso,Nazionalita,Descrizione,IsPremium,IsAdmin)
Values('Rami', 'MaleK', 'Rami_Malek','silvio.barra@unina.it','I@mMrR0bot','1991-01-01','Uomo',DEFAULT,'Google is the way',TRUE,TRUE);

INSERT INTO INCIDE (NomeArte,CodA)
Values('ColdPlay',1);

INSERT INTO PRODUCE(NomeArte,CodT)
VALUES('ColdPlay',1);

insert into Vota
values('Rami_Malek', 1, 10);  
	   
