CREATE DB PINOFY;

CREATE TABLE ALBUM (
	CodA SERIAL,
	Titolo VARCHAR(50) NOT NULL,
	AnnoU INTEGER NOT NULL,
	Durata TIME DEFAULT '00:00:00',
	Ntracce INTEGER DEFAULT 0,
	Etichetta VARCHAR(20) DEFAULT NULL,
	Voto INTEGER DEFAULT 0,
	
	PRIMARY KEY (CodA)
);


CREATE TABLE TRACCIA (
	CodT SERIAL,
	Titolo VARCHAR(50) NOT NULL,
	Durata TIME NOT NULL,
	Etichetta VARCHAR(20) DEFAULT NULL,
	AnnoU INTEGER,
	IsCover BOOLEAN DEFAULT FALSE,
	IsRemastered BOOLEAN DEFAULT FALSE,
	Genere VARCHAR(30) NOT NULL,
	Link VARCHAR(300),
	Formato VARCHAR(4) DEFAULT 'MP3',
	Voto INTEGER DEFAULT 0,
	Qualita INTEGER DEFAULT 128,
	CodA INTEGER DEFAULT 0,
	CodTR INTEGER DEFAULT 0,
	CodTC INTEGER DEFAULT 0,
	
	UNIQUE(Titolo, AnnoU, CodA),
	PRIMARY KEY (CodT),
	FOREIGN KEY (CodA) REFERENCES Album(CodA)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodTR) REFERENCES Traccia(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodTC) REFERENCES Traccia(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	
	CHECK (Formato = 'MP3' or Formato = 'WAV' or Formato = 'FLAC'),
	CHECK (Qualita = 128 or Qualita = 256 or Qualita = 512)
);


CREATE TABLE UTENTE (
	NickName VARCHAR(20),
	Nome VARCHAR(30) NOT NULL,
	Cognome VARCHAR(30) NOT NULL,
	Email VARCHAR(100) NOT NULL,
	Password VARCHAR(20) NOT NULL,
	DataN DATE NOT NULL,
	Sesso VARCHAR(15) NOT NULL,
	Nazionalita VARCHAR(15) DEFAULT NULL,
	Descrizione VARCHAR(100) DEFAULT NULL,
	IsPremium BOOLEAN DEFAULT FALSE,
	IsAdmin BOOLEAN DEFAULT FALSE,

	PRIMARY KEY (NickName),
	
	UNIQUE(Email),
	CHECK (Email LIKE '_%@_%._%'),
	CHECK (Sesso = 'Uomo' or Sesso = 'Donna' or Sesso = 'Altro' or Sesso = 'Transgender'or Sesso = 'Lampadina' or Sesso = 'Unicorno')
);


CREATE TABLE PLAYLIST(
	CodP SERIAL,
	Titolo VARCHAR(20) NOT NULL,
	Durata TIME DEFAULT '00:00:00',
	NTracce INTEGER DEFAULT 0,
	Visibilita BOOLEAN DEFAULT TRUE,
	NickName VARCHAR(20),
	
	PRIMARY KEY (CodP),
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);


CREATE TABLE ASCOLTA (
	Nickname VARCHAR(20),
	CodT INTEGER,
	FasciaOraria INTEGER NOT NULL,
	
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	
	CHECK(FasciaOraria >= 1 and FasciaOraria <= 6) 
);

CREATE TABLE VOTA (
	NickName VARCHAR(20),
	CodT INTEGER,
	Voto INTEGER NOT NULL,
	
	FOREIGN KEY (NickName) REFERENCES UTENTE(NickName)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,	
	
	CHECK(Voto >= 1 and Voto <= 10)
);

CREATE TABLE CONTIENE (
	CodP INTEGER,
	CodT INTEGER,

	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodP) REFERENCES PLAYLIST(CodP)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);


CREATE TABLE ARTISTA (
	NomeArte VARCHAR(30),
	Descrizione VARCHAR(300) DEFAULT NULL,
	Voto INTEGER DEFAULT 0,

	PRIMARY KEY(NomeArte)
);

CREATE TABLE INCIDE (
	NomeArte VARCHAR(30),
	CodA INTEGER,
	
	FOREIGN KEY (NomeArte) REFERENCES ARTISTA(NomeArte)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodA) REFERENCES ALBUM(CodA)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

CREATE TABLE PRODUCE (
	NomeArte VARCHAR(30),
	CodT INTEGER,
	
	FOREIGN KEY (NomeArte) REFERENCES ARTISTA(NomeArte)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (CodT) REFERENCES TRACCIA(CodT)
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

--In questo blocco inseriremo prima tutte le procedure che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger
-- Per prima cosa costruiamo una procedura che si occupa di aggiornare la media del voto di una traccia dopo che e' stata votata
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia() RETURNS TRIGGER AS $Voto_Traccia$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  GROUP BY V.CodT)
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia$ LANGUAGE PLPGSQL;

--Passiamo ora alle modifiche relative agli album (necessarie dopo le modifiche dei voti delle tracce)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Album() RETURNS TRIGGER AS $Voto_Album$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA and T.Voto T.Voto > 0
		  GROUP BY T.CodT )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album$ LANGUAGE PLPGSQL

--Passiamo ora alle modifiche relative agli artisti
--(CORRETTA MA NON PER PIU' ARTISTI)
CREATE OR REPLACE FUNCTION Edit_Voto_Artista() RETURNS TRIGGER AS $Voto_Artista$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=NEW.CodT)
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=NEW.CodT);
	RETURN NULL;
END;$Voto_Artista$ LANGUAGE PLPGSQL

--In conlusione andiamo a modificare i valori di media ntracce e durate per Album quando si aggiunge una traccia al Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Album() RETURNS TRIGGER AS $Agg_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=NEW.CodA T.Voto > 0)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$Agg_Album$ LANGUAGE PLPGSQL

-- Facciamo lo stesso in fase di rimozione di una Traccia da un Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Rem_Traccia_Album() RETURNS TRIGGER AS $Rem_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA = OLD.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=OLD.CodA T.Voto > 0)
	WHERE CodA=OLD.CodA;
	RETURN NULL;
END;$Rem_Album$ LANGUAGE PLPGSQL

--Passiamo alle Playlist (prima in aggiunta)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Playlist() RETURNS TRIGGER AS $Agg_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.Codt=NEW.Codt)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$Agg_Playlist$ LANGUAGE PLPGSQL

--Creazione della playlist brani preferiti quando viene aggiunto un nuovo utente
CREATE OR REPLACE FUNCTION Playlist_Default() RETURNS TRIGGER AS $Def_Playlist$
BEGIN 
	insert into Playlist(Titolo, NickName)
	values('Brani preferiti', New.NickName);
	RETURN NULL;
END; $Def_Playlist$ LANGUAGE PLPGSQL

-- Conclusa la parte della creazione delle procedure creiamo ora i trigger che faranno uso di queste procedure

--Primo Trigger aggiorna la media di una Traccia
--(CORRETTA)
CREATE OR REPLACE TRIGGER Voto_Traccia_Media
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

--Terzo Trigger modifica il Voto del Album,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Album_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album();

--Quarto Trigger modifica il Voto del Artista,a fronte della modifica del voto della traccia
--(CORRETTO PER UN SOLO ARTISTA)
CREATE OR REPLACE TRIGGER Voto_Artista_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista();

-- Quinto Trigger si attiva quando aggiungiamo una traccia in un Album 
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Album_Mod
AFTER INSERT ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Album();

--Sesto Trigger si attiva quando rimuoviamo una traccia in un Album
--(CORRETTO)
CREATE OR REPLACE TRIGGER Rem_Album_Mod
AFTER DELETE ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Album();

--Settimo Trigger in aggiunta di una Traccia in una Playlist
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Playlist_Mod
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Playlist();

--Ultimo Trigger Crea una playlist default per l'Utente
--(CORRETTO)
CREATE OR REPLACE TRIGGER Def_Playlist
AFTER INSERT ON UTENTE
FOR EACH ROW
EXECUTE PROCEDURE Playlist_Default();

INSERT INTO ARTISTA(NomeArte,Descrizione,Voto)
VALUES ('ColdPlay','Si divertono a creare generi, non aiutandoci a fare questo progetto...',DEFAULT);

INSERT INTO ALBUM (CodA, Titolo,AnnoU,Durata,Ntracce,Etichetta,Voto)
VALUES(0,'Fittizio',2008,DEFAULT,DEFAULT,DEFAULT,DEFAULT);

INSERT INTO ALBUM (Titolo,AnnoU,Durata,Ntracce,Etichetta,Voto)
VALUES('Viva la vida or Death and all his friends',2008,DEFAULT,DEFAULT,DEFAULT,DEFAULT);

INSERT INTO TRACCIA(CodT,Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES(0, 'Fittizio','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte',DEFAULT,'MP3',DEFAULT,128,0);


INSERT INTO TRACCIA(Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES('Life in Technicolors','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte','https://open.spotify.com/track/7MT5mNCNNCoW6XP265UkdS?si=0250a49e39c7482a','MP3',DEFAULT,128,1);

INSERT INTO TRACCIA(Titolo,Durata,Etichetta,AnnoU,IsCover,IsRemastered,Genere,Link,Formato,Voto,Qualita,CodA)
VALUES('Life in Technicolors2','00:02:29',DEFAULT,2008,FALSE,FALSE,'Arte','https://open.spotify.com/track/7MT5mNCNNCoW6XP265UkdS?si=0250a49e39c7482a','MP3',DEFAULT,128,1);

INSERT INTO UTENTE(Nome,Cognome,Nickname,Email,Password,DataN,Sesso,Nazionalita,Descrizione,IsPremium,IsAdmin)
Values('Rami', 'MaleK', 'Rami_Malek','silvio.barra@unina.it','I@mMrR0bot','1991-01-01','Uomo',DEFAULT,'Google is the way',TRUE,TRUE);

INSERT INTO INCIDE (NomeArte,CodA)
Values('ColdPlay',1);

INSERT INTO PRODUCE(NomeArte,CodT)
VALUES('ColdPlay',1);

insert into Vota
values('RamiMalek', 1, 10)
