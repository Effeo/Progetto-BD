--FUNZIONI PER I VINCOLI
--primo vincolo: un utente non premium non può ascoltare tracce di qualità maggiore al 128
Create or replace Function UtentePremium() returns Trigger as $AscoltiNoPremium$
DECLARE
	Qualita1 Traccia.Qualita%TYPE;
	IsPremium1 Utente.IsPremium%TYPE;
BEGIN
	Select Qualita into Qualita1
	From Traccia
	Where New.CodT = Traccia.CodT;
	
	Select IsPremium into IsPremium1
	From Utente
	Where New.NickName = Utente.NickName;
	
	if(Qualita1 > 128 and not IsPremium1) then
		Delete From Ascolta Where (Ascolta.CodT = new.CodT and Ascolta.NickName = NEW.NickName);
	end if;
	Return null;
END;$AscoltiNoPremium$ Language plpgsql;

--seconda funzione: i voti devono essere di utenti premium
Create or replace Function VotoUtentePremium() returns Trigger as $VotiNoPremium$
DECLARE
	IsPremium1 Utente.IsPremium%TYPE;
BEGIN
	Select IsPremium into IsPremium1
	From Utente
	Where New.NickName = Utente.NickName;
	
	if(not IsPremium1) then
		Delete From Vota Where (Vota.CodT = new.CodT and Vota.NickName = NEW.NickName);
	end if;
	Return null;
END;$VotiNoPremium$ Language plpgsql;

--Terzo trigger: se una traccia è cover allora deve avere artista diverso dall'originale
Create or replace Function TracciaCover() returns Trigger as $TracciaCoverTrigger$
DECLARE
	TracciaOr Traccia.CodTC%Type;
	ArtistaOr Artista.NomeArte%Type;
BEGIN
	
	SELECT Traccia.CodTC into TracciaOr
	FROM Produce, Traccia
	Where Produce.CodT = New.CodT and Traccia.CodT = New.CodT;

	SELECT Artista.NomeArte into ArtistaOr
	FROM Artista, Produce
	Where Produce.CodT = TracciaOr and Produce.NomeArte = Artista.NomeArte;

	if (ArtistaOr = new.NomeArte) then
		delete from Produce where (CodT = New.CodT and NomeArte = new.NomeArte);
	end if;
	
	Return null;
END;$TracciaCoverTrigger$ Language plpgsql;

--Quarto trigger: il formato della remastered deve essere maggiore di quella originale e l'anno deve essere maggiore dell'originale
Create or replace Function FormatoAnnoRemastered() returns Trigger as $FormatoAnnoRemasteredTrigger$
DECLARE
	FormatoO Traccia.Formato%Type;
	AnnoO Traccia.AnnoU%Type;
BEGIN
	SELECT Traccia.Formato into FormatoO
	FROM Traccia
	Where Traccia.CodT = New.CodTR;
	
	SELECT Traccia.AnnoU into AnnoO
	FROM Traccia
	Where Traccia.CodT = New.CodTR;
	
	if(FormatoO = 'MP3' and new.Formato = 'MP3')then
		delete from Traccia where Codt = new.CodT;
	elseif(FormatoO = 'WAV' and (new.Formato = 'WAV' or new.Formato = 'MP3')) then
		delete from Traccia where Codt = new.CodT;
	elseif (FormatoO = 'FLAC' and new.Formato <> 'FLAC') then
		delete from Traccia where Codt = new.CodT;
	end if;
	
	if(New.AnnoU <= AnnoO) then
		delete from Traccia where Codt = new.CodT;
	end if;
	
	Return null;
END; $FormatoAnnoRemasteredTrigger$ Language plpgsql;

--Quinto trigger: L'anno della cover deve essere maggiore uguale dell'originale e l'album di apparteneza deve essere diverso
Create or replace Function AlbumAnnoCover() returns Trigger as $AlbumAnnoCoverTrigger$
DECLARE
	CodAO Traccia.CodA%Type;
	AnnoO Traccia.AnnoU%Type;
BEGIN
	SELECT Traccia.CodA into CodAO
	FROM Traccia
	Where Traccia.CodT = New.CodTC;
	
	SELECT Traccia.AnnoU into AnnoO
	FROM Traccia
	Where Traccia.CodT = New.CodTC;
	
	if(CodAO = new.CodA or new.AnnoU < AnnoO) then
		delete from Traccia where Codt = new.CodT;
	end if;
	
	Return null;
END; $AlbumAnnoCoverTrigger$ Language plpgsql;

--TRIGGER
--Trigger per il primo vincolo
Create or replace Trigger AscoltiNoPremium 
After Insert on Ascolta
FOR EACH ROW
Execute procedure UtentePremium();

--Trigger per il secondo vincolo
Create or replace Trigger AscoltiNoPremium 
After Insert on Vota
FOR EACH ROW
Execute procedure VotoUtentePremium();

--Trigger per il terzo vincolo
Create or replace Trigger TracciaCoverTrigger 
After Insert on Produce
FOR EACH ROW
Execute procedure TracciaCover();

--Trigger per il quinto vincolo
Create or replace Trigger AlbumAnnoCoverTrigger 
After Insert on Traccia
FOR EACH ROW
Execute procedure AlbumAnnoCover();
