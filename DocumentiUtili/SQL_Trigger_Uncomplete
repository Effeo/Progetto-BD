--In questo blocco inseriremo prima tutte le procedure che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger


-- Per prima cosa costruiamo una procedura che si occupa di aggiornare la media del voto di una traccia dopo che e' stata votata

CREATE OR REPLACE FUNCTION Edit_Voto_Traccia() RETURNS TRIGGER AS $Voto_Traccia$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  GROUP BY V.CodT)
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia$ LANGUAGE PLPGSQL;

--Qualora l'utente(premium) volesse cambiare la propria opinione sul voto di una (o piu) tracce il voto deve essere modificato (al piu recente)

CREATE OR REPLACE FUNCTION Edit_Voto_Utente() RETURNS TRIGGER AS $Voto_Utente$
BEGIN
	UPDATE VOTA
	SET Voto=NEW.Voto
	WHERE 	Vota.NickName=NEW.NickName AND Vota.CodT=NEW.CodT;
	RETURN NULL;
END; $Voto_Utente$ LANGUAGE PLPGSQL;
-- Ovviamente quando cambia il voto di un utente bisognera richiamare il trigger per cambiare la media dei voti della traccia scritto sopra

--Passiamo ora alle modifiche relative agli album (necessarie dopo le modifiche dei voti delle tracce)

CREATE OR REPLACE FUNCTION Edit_Voto_Album() RETURNS TRIGGER AS $Voto_Album$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA
		  GROUP BY T.CodT )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album$ LANGUAGE PLPGSQL

--Passiamo ora alle modifiche relative agli artisti

CREATE OR REPLACE FUNCTION Edit_Voto_Artista() RETURNS TRIGGER AS $Voto_Artista$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=NEW.CodT)
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=NEW.CodT);
	RETURN NULL;
END;$Voto_Artista$ LANGUAGE PLPGSQL

--In conlusione andiamo a modificare i valori di media ntracce e durate per Album quando si aggiunge una traccia al Album

CREATE OR REPLACE FUNCTION Agg_Traccia_Album() RETURNS TRIGGER AS $Agg_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=NEW.CodA)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$Agg_Album$ LANGUAGE PLPGSQL

-- Facciamo lo stesso in fase di rimozione di una Traccia da un Album

CREATE OR REPLACE FUNCTION Rem_Traccia_Album() RETURNS TRIGGER AS $Rem_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=Durata - (SELECT Durata
			     FROM TRACCIA AS T
			     WHERE T.CodT=NEW.CodT),  -- Controlliamo la cosa del delete se NEW va bene (credo basti usare il BEFORE)
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=NEW.CodA)
	WHERE CodA=NEW.CodA;
	RETURN XXX;
END;$Rem_Album$

--Passiamo alle Playlist (prima in aggiunta)
CREATE OR REPLACE FUNCTION Agg_Traccia_Playlist() RETURNS TRIGGER AS $Agg_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.Codt=NEW.Codt)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$Agg_Playlist$LANGUAGE PLPGSQL

--Infine la rimozione

CREATE OR REPLACE FUNCTION Rem_Traccia_Playlist() RETURNS TRIGGER AS $Rem_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce-1,
	    Durata=Durata - (SELECT Durata
			     FROM TRACCIA AS T
			     WHERE T.CodT=NEW.CodT)
	    
	WHERE CodP=NEW.CodP;
	RETURN XXX; 
END;$Rem_Playlist$

-- Conclusa la parte della creazione delle procedure creiamo ora i trigger che faranno uso di queste procedure

--Primo Trigger aggiorna la media di una Traccia

CREATE OR REPLACE TRIGGER Voto_Traccia_Media
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

-- Secondo Trigger aggiorna il voto conseguente ad una modifica da parte del utente

CREATE OR REPLACE TRIGGER Voto_Utente_Mod
AFTER UPDATE OF Voto on VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Utente(); 
-- EXECUTE PROCEDURE Edit_Voto_Traccia();si puo fare senza che creo due trigger ?

--Terzo Trigger modifica il Voto del Album,a fronte della modifica del voto della traccia

CREATE OR REPLACE TRIGGER Voto_Album_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album();

--Quarto Trigger modifica il Voto del Artista,a fronte della modifica del voto della traccia

CREATE OR REPLACE TRIGGER Voto_Artista_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista();

-- Quinto Trigger si attiva quando aggiungiamo una traccia in un Album 
CREATE OR REPLACE TRIGGER Agg_Album_Mod
AFTER INSERT ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Album();

--Sesto Trigger si attiva quando rimuoviamo una traccia in un Album
CREATE OR REPLACE TRIGGER Rem_Album_Mod
BEFORE DELETE ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Album();

--Settimo Trigger in aggiunta di una Traccia in una Playlist
CREATE OR REPLACE TRIGGER Agg_Playlist_Mod
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Playlist();

--Ottavo Trigger in rimozione
CREATE OR REPLACE TRIGGER Rem_Playlist_Mod
BEFORE DELETE ON CONTIENE
FOR EACH ROW
EXECUTE Rem_Traccia_Playlist;

--Ultimo Trigger Crea una playlist default per l'Utente

CREATE OR REPLACE TRIGGER Like_Play
AFTER INSERT ON UTENTE

INSERT INTO Playlist(Titolo,Durata,Ntracce,Visibilita,NickName)
VALUES ('Liked',DEFAULT,DEFAULT,DEFAULT,NEW.NickName);








