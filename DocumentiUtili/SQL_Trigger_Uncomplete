--In questo blocco inseriremo prima tutte le funzioni che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger

--PROCEDURA 1: All'aggiunta di un voto viene fatta la media in Traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia_INS() RETURNS TRIGGER AS $Voto_Traccia_INS$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  )
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia_INS$ LANGUAGE PLPGSQL;

--TRIGGER 1: aggiorna la media di una Traccia all'inserimento di un voto
--(CORRETTA)
CREATE OR REPLACE TRIGGER Voto_Traccia_INS
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_INS();


-- TRIGGER 1.2: aggiorna il voto di una traccia dopo la modifica di un voto
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Traccia_UPD
AFTER UPDATE OF Voto on VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_INS();

--PROCEDURA 2: Dopo l'eliminazione di un voto viene aggiornata la media in Traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia_DEL() RETURNS TRIGGER AS $Voto_Traccia_DEL$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=OLD.CodT 
		  )
	WHERE CodT=OLD.CodT;
	RETURN Null;
END; $Voto_Traccia_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 2: aggiorna la media di una Traccia all'eliminazione di un voto
CREATE OR REPLACE TRIGGER Voto_Traccia_DEL
AFTER DELETE ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_DEL();

--PROCEDURA 3: Dopo aver aggiornato il voto di una traccia bisogna aggiornare i voti dell'album a cui appartiene
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Album_UPD() RETURNS TRIGGER AS $Voto_Album_UPD$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA and T.Voto > 0
		  )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album_UPD$ LANGUAGE PLPGSQL;

--TRIGGER 3: modifica il Voto del Album,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Album_UPD
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album_UPD();

-- PROCEDURA 4: Dopo l'eliminazione di una traccia bisogna modificare il numero di tracce, la durata e la media dei voti dell'album a cui apparteneva
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_Durata_Voto_Album_DEL() RETURNS TRIGGER AS $TRIGGER_Ntracce_Durata_Voto_Album_DEL$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA = OLD.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=OLD.CodA and T.Voto > 0)
	WHERE CodA=OLD.CodA;
	RETURN NULL;
END;$TRIGGER_Ntracce_Durata_Voto_Album_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 4: modifica il numero delle tracce, il tempo e il voto dell'album a cui apparteneva una traccia eliminata
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_Durata_Voto_Album_DEL
AFTER DELETE ON Traccia
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_Durata_Voto_Album_DEL();

--PROCEDURA 5: quando viene aggiunta una traccia bisogna aggiornare il numero di tracce e la durata dell'album a cui appartiene 
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_Durata_Album_INS() RETURNS TRIGGER AS $TRIGGER_Ntracce_Durata_Album_INS$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$TRIGGER_Ntracce_Durata_Album_INS$ LANGUAGE PLPGSQL;

--TRIGGER 5: modifica numero tracce e durata all'aggiunta di una traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_Durata_Album_INS
AFTER INSERT ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_Durata_Album_INS();

--PROCEDURA 6: Dopo aver aggiornato il voto di una traccia bisogna aggiornare il voto degli artisti che l'hanno prodotta
--(CORRETTO)
CREATE OR REPLACE FUNCTION Voto_Artista_UPD() RETURNS TRIGGER AS $TRIGGER_Voto_Artista_UPD$
DECLARE 
	CursorArtistaVoto CURSOR for 
	select NomeArte, avg(voto) AS votoMedio
	from Traccia as T, Produce as P
	where T.Codt = p.CodT and voto > 0
	group by Nomearte; 
	
	ArtistaVoto record;
	
BEGIN 
	open CursorArtistaVoto; 
	loop 
		fetch CursorArtistaVoto into ArtistaVoto;
		exit when not found;
		
		update Artista
		set Voto = ArtistaVoto.votoMedio
		where NomeArte = ArtistaVoto.NomeArte;
		
	end loop;
	
	close CursorArtistaVoto;
	
	return null;
END;$TRIGGER_Voto_Artista_UPD$ LANGUAGE PLPGSQL;

--TRIGGER 6: modifica il Voto del Artista,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Voto_Artista_UPD
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Voto_Artista_UPD();

--PROCEDURA 7: Dopo aver eliminato il voto di una traccia bisogna aggiornare il voto degli artisti che l'hanno prodotta
--(CORRETTO)
CREATE OR REPLACE FUNCTION Voto_Artista_DEL() RETURNS TRIGGER AS $TRIGGER_Voto_Artista_DEL$
DECLARE 
	CursorArtistaVoto CURSOR for 
	select NomeArte, avg(voto) AS votoMedio
	from Traccia as T, Produce as P
	where T.Codt = p.CodT and voto > 0
	group by Nomearte; 
	
	CursorArtistaNoProduce CURSOR for 
	select Artista.NomeArte
	from Artista
	where Artista.NomeArte not in (Select NomeArte From Produce);
	
	ArtistaNoProduce record;
	ArtistaVoto record;
	
BEGIN 
	open CursorArtistaVoto; 
	loop 
		fetch CursorArtistaVoto into ArtistaVoto;
		exit when not found;
		
		update Artista
		set Voto = ArtistaVoto.votoMedio
		where NomeArte = ArtistaVoto.NomeArte;
		
	end loop;
	close CursorArtistaVoto;
	
	open CursorArtistaNoProduce;
	loop
		fetch CursorArtistaNoProduce into ArtistaNoProduce;
		exit when not found;
		
		update Artista
		set Voto = 0
		where NomeArte = ArtistaNoProduce.NomeArte;
	end loop;
	close CursorArtistaNoProduce;
	
	return null;
END;$TRIGGER_Voto_Artista_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 7: modifica il Voto del Artista,a fronte della eliminazione di una traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Trigger_Voto_Artista_DEL
AFTER DELETE ON Produce
FOR EACH ROW
EXECUTE PROCEDURE Voto_Artista_DEL();

--PROCEDURA 8: Creazione della playlist brani preferiti quando viene aggiunto un nuovo utente
--(CORRETTA)
CREATE OR REPLACE FUNCTION Playlist_Default() RETURNS TRIGGER AS $Def_Playlist$
BEGIN 
	insert into Playlist(Titolo, NickName)
	values('Brani preferiti', New.NickName);
	RETURN NULL;
END; $Def_Playlist$ LANGUAGE PLPGSQL;

--TRIGGER 8: creazione playlist default
--(CORRETTO)
CREATE OR REPLACE TRIGGER Def_Playlist
AFTER INSERT ON UTENTE
FOR EACH ROW
EXECUTE PROCEDURE Playlist_Default();

--PROCEDURA 9: aggiornamento del numero delle tracce e della durata di una playlist quando gli viene aggiunta una traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_durata_Playlist_INS() RETURNS TRIGGER AS $TRIGGER_Ntracce_durata_Playlist_INS$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T, Contiene As C
			     WHERE T.Codt=C.CodT and C.CodP = NEW.CodP)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$TRIGGER_Ntracce_durata_Playlist_INS$ LANGUAGE PLPGSQL;

--TRIGGER 9: aggiunta di una Traccia in una Playlist
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_durata_Playlist_INS
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_durata_Playlist_INS();


--PROCEDURA 10: aggiornamento numero tracce e durata alla eliminazione di una traccia che è contenuta in playlist
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_durata_Playlist_DEL() RETURNS TRIGGER AS $TRIGGER_Ntracce_durata_Playlist_DEL$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce-1,
	    Durata=(SELECT SUM(durata)
			     FROM CONTIENE AS C, Traccia as T
			     WHERE C.CodP=OLD.CodP and C.CodT = T.CodT)
	    
	WHERE CodP=OLD.CodP;
	RETURN NULL; 
END;$TRIGGER_Ntracce_durata_Playlist_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 10: aggiornamento numero tracce e durata di una playlist dopo che è stata eliminata una traccia che conteneva
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_durata_Playlist_DEL
AFTER DELETE ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_durata_Playlist_DEL();

--PROCEDURA 11: quando viene eliminato un artista vengono eliminate le tracce e gli album che ha prodotto
CREATE OR REPLACE FUNCTION DEL_Artista_Pro() RETURNS TRIGGER AS $TRIGGER_DEL_Artista_Pro$
BEGIN
	delete from traccia
	where codt in (Select codt from produce as P where P.NomeArte = OLD.NomeArte);
	
	RETURN NULL; 
END;$TRIGGER_DEL_Artista_Pro$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION DEL_Artista_INC() RETURNS TRIGGER AS $TRIGGER_DEL_Artista_INC$
BEGIN

	delete from album
	where codA in (Select codA from incide as I where I.NomeArte = OLD.NomeArte);
	
	RETURN NULL; 
END;$TRIGGER_DEL_Artista_INC$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRIGGER_DEL_Artista_PRO
AFTER DELETE ON Produce
FOR EACH ROW
EXECUTE PROCEDURE DEL_Artista_PRO();

CREATE OR REPLACE TRIGGER TRIGGER_DEL_Artista_INC
AFTER DELETE ON Incide
FOR EACH ROW
EXECUTE PROCEDURE DEL_Artista_INC();
