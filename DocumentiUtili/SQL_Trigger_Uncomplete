--In questo blocco inseriremo prima tutte le procedure che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger


-- Per prima cosa costruiamo una procedura che si occupa di aggiornare la media del voto di una traccia dopo che e' stata votata o quando è stato modificato
--un voto
-- Quando aggiungiamo un voto per una traccia il cui artista ha già prodotto altre tracce non va
--(CORRETTA CI STA DANDO PROBLEMI)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia() RETURNS TRIGGER AS $Voto_Traccia$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  GROUP BY V.CodT)
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia$ LANGUAGE PLPGSQL;

--Passiamo ora alle modifiche relative agli album (necessarie dopo le modifiche dei voti delle tracce)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Album() RETURNS TRIGGER AS $Voto_Album$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA and T.Voto > 0
		  GROUP BY T.CodT )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album$ LANGUAGE PLPGSQL;

--Passiamo ora alle modifiche relative agli artisti
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Artista() RETURNS TRIGGER AS $Voto_Artista$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=NEW.CodT) and T.Voto > 0
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=NEW.CodT);
	RETURN NULL;
END;$Voto_Artista$ LANGUAGE PLPGSQL;

--In conlusione andiamo a modificare i valori di media ntracce e durate per Album quando si aggiunge una traccia al Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Album() RETURNS TRIGGER AS $Agg_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=NEW.CodA and T.Voto > 0)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$Agg_Album$ LANGUAGE PLPGSQL;

-- Facciamo lo stesso in fase di rimozione di una Traccia da un Album
--(CORRETTA)
CREATE OR REPLACE FUNCTION Rem_Traccia_Album() RETURNS TRIGGER AS $Rem_Album$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA = OLD.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=OLD.CodA and T.Voto > 0)
	WHERE CodA=OLD.CodA;
	RETURN NULL;
END;$Rem_Album$ LANGUAGE PLPGSQL;

--Passiamo alle Playlist (prima in aggiunta)
--(CORRETTA)
CREATE OR REPLACE FUNCTION Agg_Traccia_Playlist() RETURNS TRIGGER AS $Agg_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.Codt=NEW.Codt)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$Agg_Playlist$ LANGUAGE PLPGSQL;

--Infine la rimozione
--(CORRETTA)
CREATE OR REPLACE FUNCTION Rem_Traccia_Playlist() RETURNS TRIGGER AS $Rem_Playlist$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce-1,
	    Durata=(SELECT SUM(durata)
			     FROM CONTIENE AS C, Traccia as T
			     WHERE C.CodP=OLD.CodP and C.CodT = T.CodT)
	    
	WHERE CodP=OLD.CodP;
	RETURN NULL; 
END;$Rem_Playlist$ LANGUAGE PLPGSQL;

--Creazione della playlist brani preferiti quando viene aggiunto un nuovo utente
(CORRETTA)
CREATE OR REPLACE FUNCTION Playlist_Default() RETURNS TRIGGER AS $Def_Playlist$
BEGIN 
	insert into Playlist(Titolo, NickName)
	values('Brani preferiti', New.NickName);
	RETURN NULL;
END; $Def_Playlist$ LANGUAGE PLPGSQL;

--Funzione che aggiorna i voti di un artista quando una traccia viene eliminata
--(DA CONTROLLARE)
CREATE OR REPLACE FUNCTION Edit_Voto_Artista_Del() RETURNS TRIGGER AS $Voto_Artista_Del$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=OLD.CodT) and T.Voto > 0
		 GROUP BY T.CodT)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=OLD.CodT);
	RETURN NULL;
END;$Voto_Artista_Del$ LANGUAGE PLPGSQL;

-- Conclusa la parte della creazione delle procedure creiamo ora i trigger che faranno uso di queste procedure

--Primo Trigger aggiorna la media di una Traccia
--(CORRETTA)
CREATE OR REPLACE TRIGGER Voto_Traccia_Media
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

-- Secondo Trigger aggiorna il voto conseguente ad una modifica da parte del utente
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Utente_Mod
AFTER UPDATE OF Voto on VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia();

--Terzo Trigger modifica il Voto del Album,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Album_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album();

--Quarto Trigger modifica il Voto del Artista,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Artista_Mod
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista();

-- Quinto Trigger si attiva quando aggiungiamo una traccia in un Album 
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Album_Mod
AFTER INSERT ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Album();

--Sesto Trigger si attiva quando rimuoviamo una traccia in un Album
--(CORRETTO)
CREATE OR REPLACE TRIGGER Rem_Album_Mod
AFTER DELETE ON TRACCIA --Album chaive esterna
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Album();

--Settimo Trigger in aggiunta di una Traccia in una Playlist
--(CORRETTO)
CREATE OR REPLACE TRIGGER Agg_Playlist_Mod
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Agg_Traccia_Playlist();

--Ottavo Trigger in rimozione
--(CORRETTO)
CREATE OR REPLACE TRIGGER Rem_Playlist
AFTER DELETE ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Rem_Traccia_Playlist();

--Trigger per aggiornare il voto di un artista dopo l'eliminazione di una traccia
(DA CONTROLLARE)
CREATE OR REPLACE TRIGGER Agg_Voto_Art_Del
AFTER DELETE ON Traccia
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Artista_Del();

--Ultimo Trigger Crea una playlist default per l'Utente
--(CORRETTO)
CREATE OR REPLACE TRIGGER Def_Playlist
AFTER INSERT ON UTENTE
FOR EACH ROW
EXECUTE PROCEDURE Playlist_Default();
