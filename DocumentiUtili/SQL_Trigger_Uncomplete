--In questo blocco inseriremo prima tutte le funzioni che useremo quando attiveremo i Trigger
-- E poi dichiareremo i sudetti Trigger

--PROCEDURA 1: All'aggiunta di un voto viene fatta la media in Traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia_INS() RETURNS TRIGGER AS $Voto_Traccia_INS$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=NEW.CodT 
		  )
	WHERE CodT=NEW.CodT;
	RETURN Null;
END; $Voto_Traccia_INS$ LANGUAGE PLPGSQL;

--TRIGGER 1: aggiorna la media di una Traccia all'inserimento di un voto
--(CORRETTA)
CREATE OR REPLACE TRIGGER Voto_Traccia_INS
AFTER INSERT ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_INS();


-- TRIGGER 1.2: aggiorna il voto di una traccia dopo la modifica di un voto
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Traccia_UPD
AFTER UPDATE OF Voto on VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_INS();

--PROCEDURA 2: Dopo l'eliminazione di un voto viene aggiornata la media in Traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Traccia_DEL() RETURNS TRIGGER AS $Voto_Traccia_DEL$
BEGIN
	UPDATE TRACCIA
	SET VOTO=(SELECT AVG(V.Voto)
		  FROM VOTA AS V
		  WHERE V.CodT=OLD.CodT 
		  )
	WHERE CodT=OLD.CodT;
	RETURN Null;
END; $Voto_Traccia_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 2: aggiorna la media di una Traccia all'eliminazione di un voto
CREATE OR REPLACE TRIGGER Voto_Traccia_DEL
AFTER DELETE ON VOTA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Traccia_DEL();

--PROCEDURA 3: Dopo aver aggiornato il voto di una traccia bisogna aggiornare i voti dell'album a cui appartiene
--(CORRETTA)
CREATE OR REPLACE FUNCTION Edit_Voto_Album_UPD() RETURNS TRIGGER AS $Voto_Album_UPD$
BEGIN
	UPDATE ALBUM
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA as T
		  WHERE T.codA=NEW.codA and T.Voto > 0
		  )
	WHERE CodA=NEW.CodA;
	RETURN Null;
END; $Voto_Album_UPD$ LANGUAGE PLPGSQL;

--TRIGGER 3: modifica il Voto del Album,a fronte della modifica del voto della traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER Voto_Album_UPD
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Edit_Voto_Album_UPD();

-- PROCEDURA 4: Dopo l'eliminazione di una traccia bisogna modificare il numero di tracce, la durata e la media dei voti dell'album a cui apparteneva
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_Durata_Voto_Album_DEL() RETURNS TRIGGER AS $TRIGGER_Ntracce_Durata_Voto_Album_DEL$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce-1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA = OLD.CodA),
	    Voto=(SELECT AVG(T.Voto)
		  FROM  TRACCIA AS T
		  WHERE T.CodA=OLD.CodA and T.Voto > 0)
	WHERE CodA=OLD.CodA;
	RETURN NULL;
END;$TRIGGER_Ntracce_Durata_Voto_Album_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 4: modifica il numero delle tracce, il tempo e il voto dell'album a cui apparteneva una traccia eliminata
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_Durata_Voto_Album_DEL
AFTER DELETE ON Traccia
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_Durata_Voto_Album_DEL();

--PROCEDURA 5: quando viene aggiunta una traccia bisogna aggiornare il numero di tracce e la durata dell'album a cui appartiene 
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_Durata_Album_INS() RETURNS TRIGGER AS $TRIGGER_Ntracce_Durata_Album_INS$
BEGIN
	UPDATE ALBUM
	SET Ntracce=Ntracce + 1,
	    Durata=(SELECT sum(Durata)
			     FROM TRACCIA AS T
			     WHERE T.CodA=NEW.CodA)
	WHERE CodA=NEW.CodA;
	RETURN NULL;
END;$TRIGGER_Ntracce_Durata_Album_INS$ LANGUAGE PLPGSQL;

--TRIGGER 5: modifica numero tracce e durata all'aggiunta di una traccia
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_Durata_Album_INS
AFTER INSERT ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_Durata_Album_INS();

--PROCEDURA 6: Dopo aver aggiornato il voto di una traccia bisogna aggiornare il voto degli artisti che l'hanno prodotta
--(CONTROLLARE)
CREATE OR REPLACE FUNCTION Voto_Artista_UPD() RETURNS TRIGGER AS $TRIGGER_Voto_Artista_UPD$
BEGIN 
	CREATE OR REPLACE VIEW ArtistaVoto as
	select NomeArte, avg(voto) AS votoMedio
	from Traccia as T, Produce as P
	where T.Codt = p.CodT and voto > 0
	group by Nomearte;

	UPDATE ARTISTA
	SET Voto = (SELECT votoMedio FROM ArtistaVoto where NomeArte in 
			   (SELECT NomeArte FROM Produce where CodT = New.CodT))
	WHERE NomeArte in (SELECT NomeArte FROM Produce where CodT = New.CodT);
	RETURN NULL;
END;$TRIGGER_Voto_Artista_UPD$ LANGUAGE PLPGSQL;

--TRIGGER 6: modifica il Voto del Artista,a fronte della modifica del voto della traccia
--(CONTROLLARE)
CREATE OR REPLACE TRIGGER TRIGGER_Voto_Artista_UPD
AFTER UPDATE OF Voto ON TRACCIA
FOR EACH ROW
EXECUTE PROCEDURE Voto_Artista_UPD();

--PROCEDURA 7: Dopo aver eliminato il voto di una traccia bisogna aggiornare il voto degli artisti che l'hanno prodotta
--(CONTROLLARE)
CREATE OR REPLACE FUNCTION Voto_Artista_DEL() RETURNS TRIGGER AS $TRIGGER_Voto_Artista_DEL$
BEGIN 
	UPDATE ARTISTA
	SET Voto=(SELECT AVG(T.Voto)
		  FROM TRACCIA AS T,PRODUCE AS P
		  WHERE T.CodT=P.CodT AND P.NomeArte IN (SELECT NomeArte
							 FROM PRODUCE AS P1
							 WHERE P1.CodT=OLD.CodT) and T.Voto > 0)
	WHERE NomeArte IN (SELECT NomeArte
			   FROM PRODUCE AS P2
			   WHERE P2.CodT=OLD.CodT);
	RETURN NULL;
END;$TRIGGER_Voto_Artista_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 7: modifica il Voto del Artista,a fronte della eliminazione di una traccia
--(CONTROLLARE)
CREATE OR REPLACE TRIGGER Voto_Artista_DEL
AFTER DELETE ON Produce
FOR EACH ROW
EXECUTE PROCEDURE Voto_Artista_DEL();

--PROCEDURA 8: Creazione della playlist brani preferiti quando viene aggiunto un nuovo utente
--(CORRETTA)
CREATE OR REPLACE FUNCTION Playlist_Default() RETURNS TRIGGER AS $Def_Playlist$
BEGIN 
	insert into Playlist(Titolo, NickName)
	values('Brani preferiti', New.NickName);
	RETURN NULL;
END; $Def_Playlist$ LANGUAGE PLPGSQL;

--TRIGGER 8: creazione playlist default
--(CORRETTO)
CREATE OR REPLACE TRIGGER Def_Playlist
AFTER INSERT ON UTENTE
FOR EACH ROW
EXECUTE PROCEDURE Playlist_Default();

--PROCEDURA 9: aggiornamento del numero delle tracce e della durata di una playlist quando gli viene aggiunta una traccia
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_durata_Playlist_INS() RETURNS TRIGGER AS $TRIGGER_Ntracce_durata_Playlist_INS$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce+1,
	    Durata=(SELECT SUM(Durata)
			     FROM TRACCIA AS T, Contiene As C
			     WHERE T.Codt=C.CodT and C.CodP = NEW.CodP)
	    
	WHERE CodP=NEW.CodP; 
	RETURN NULL;
END;$TRIGGER_Ntracce_durata_Playlist_INS$ LANGUAGE PLPGSQL;

--TRIGGER 9: aggiunta di una Traccia in una Playlist
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_durata_Playlist_INS
AFTER INSERT ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_durata_Playlist_INS();


--PROCEDURA 10: aggiornamento numero tracce e durata alla eliminazione di una traccia che è contenuta in playlist
--(CORRETTA)
CREATE OR REPLACE FUNCTION Ntracce_durata_Playlist_DEL() RETURNS TRIGGER AS $TRIGGER_Ntracce_durata_Playlist_DEL$
BEGIN
	UPDATE Playlist
	SET NTracce=NTracce-1,
	    Durata=(SELECT SUM(durata)
			     FROM CONTIENE AS C, Traccia as T
			     WHERE C.CodP=OLD.CodP and C.CodT = T.CodT)
	    
	WHERE CodP=OLD.CodP;
	RETURN NULL; 
END;$TRIGGER_Ntracce_durata_Playlist_DEL$ LANGUAGE PLPGSQL;

--TRIGGER 10: aggiornamento numero tracce e durata di una playlist dopo che è stata eliminata una traccia che conteneva
--(CORRETTO)
CREATE OR REPLACE TRIGGER TRIGGER_Ntracce_durata_Playlist_DEL
AFTER DELETE ON CONTIENE
FOR EACH ROW
EXECUTE PROCEDURE Ntracce_durata_Playlist_DEL();


--DA FARE:
--quando viene eliminato un artista bisogna eliminare tutte le tracce e gli album che ha prodotto
